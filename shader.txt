const vertexShaderSource = `
attribute vec4 a_position;
void main() {
    gl_Position = a_position;
}
`;

// Fragment shader (TV shader code)
const fragmentShaderSource = `
precision mediump float;

uniform vec2 u_resolution;
uniform float u_time;
uniform sampler2D u_texture;

float hash(vec2 p)
{
    p=fract(p*.3197);
    return fract(1.+sin(51.*p.x+73.*p.y)*13753.3);
}

float noise(vec2 p)
{
    vec2 i=floor(p),f=fract(p),u=f*f*(3.-2.*f);
    return mix(mix(hash(i),hash(i+vec2(1,0)),u.x),mix(hash(i+vec2(0,1)),hash(i+1.),u.x),u.y);
}

void main() {
    vec2 p = gl_FragCoord.xy / u_resolution.xy;
    
    // put uv in texture pixel space
    const float fuzz = .0005;
    const float fuzzScale = 800.;
    const float fuzzSpeed = 9.;
    p.x += fuzz*(noise(vec2(p.y*fuzzScale, u_time*fuzzSpeed))*2.-1.);
    
    // init output color
    vec4 c = texture2D(u_texture, p);
    
    // chromatic aberration
    const float chromatic = .002;
    c.r = texture2D(u_texture, p - vec2(chromatic,0)).r;
    c.b = texture2D(u_texture, p + vec2(chromatic,0)).b;
    
    // tv static noise
    const float staticNoise = .1;
    c += staticNoise * hash(p + mod(u_time, 1e3));
    
    // scan lines
    const float scanlineScale = 1e3;
    const float scanlineAlpha = .1;
    c *= 1. + scanlineAlpha*sin(p.y*scanlineScale);
    
    // black vignette around edges
    const float vignette = 2.;
    const float vignettePow = 6.;
    float dx = 2.*p.x-1., dy = 2.*p.y-1.;
    c *= 1.-pow((dx*dx + dy*dy)/vignette, vignettePow);
    
    gl_FragColor = c;
}
`;

function createShader(gl, type, source) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        console.error('Shader compilation error:', gl.getShaderInfoLog(shader));
        gl.deleteShader(shader);
        return null;
    }
    return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
    const program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        console.error('Program linking error:', gl.getProgramInfoLog(program));
        gl.deleteProgram(program);
        return null;
    }
    return program;
}

function initShaderCanvas() {
    const shaderCanvas = document.getElementById('shaderCanvas');
    const gl = shaderCanvas.getContext('webgl');

    if (!gl) {
        console.error('WebGL not supported');
        return null;
    }

    shaderCanvas.width = window.innerWidth;
    shaderCanvas.height = window.innerHeight;
    gl.viewport(0, 0, shaderCanvas.width, shaderCanvas.height);

    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);
    const program = createProgram(gl, vertexShader, fragmentShader);
    gl.useProgram(program);

    const texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,
        document.getElementById('glCanvas'));

    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
        -1, -1,
        1, -1,
        -1, 1,
        -1, 1,
        1, -1,
        1, 1
    ]), gl.STATIC_DRAW);

    const positionAttributeLocation = gl.getAttribLocation(program, 'a_position');
    const resolutionUniformLocation = gl.getUniformLocation(program, 'u_resolution');
    const timeUniformLocation = gl.getUniformLocation(program, 'u_time');
    const textureUniformLocation = gl.getUniformLocation(program, 'u_texture');

    return {
        gl, shaderCanvas, program, positionAttributeLocation,
        resolutionUniformLocation, timeUniformLocation, textureUniformLocation
    };
}

function renderShaderOverlay(shaderContext, time) {
    const { gl, shaderCanvas, program,
        positionAttributeLocation,
        resolutionUniformLocation,
        timeUniformLocation,
        textureUniformLocation } = shaderContext;

    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,
        document.getElementById('glCanvas'));

    gl.clearColor(0, 0, 0, 0);
    gl.clear(gl.COLOR_BUFFER_BIT);

    gl.enableVertexAttribArray(positionAttributeLocation);
    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);

    gl.uniform2f(resolutionUniformLocation, shaderCanvas.width, shaderCanvas.height);
    gl.uniform1f(timeUniformLocation, time * 0.001);
    gl.uniform1i(textureUniformLocation, 0);

    gl.drawArrays(gl.TRIANGLES, 0, 6);
}

let shaderContext;
window.addEventListener('load', () => {
    shaderContext = initShaderCanvas();
});

window.addEventListener('resize', () => {
    const shaderCanvas = document.getElementById('shaderCanvas');
    const gameCanvas = document.getElementById('glCanvas');

    shaderCanvas.width = gameCanvas.width = window.innerWidth;
    shaderCanvas.height = gameCanvas.height = window.innerHeight;

    if (shaderContext) {
        shaderContext.gl.viewport(0, 0, shaderCanvas.width, shaderCanvas.height);
    }
});

const originalRequestAnimationFrame = window.requestAnimationFrame;
window.requestAnimationFrame = function (callback) {
    return originalRequestAnimationFrame(function (time) {
        callback(time);

        if (shaderContext) {
            renderShaderOverlay(shaderContext, time);
        }
    });
};